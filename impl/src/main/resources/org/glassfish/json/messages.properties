#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2013-2017 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://oss.oracle.com/licenses/CDDL+GPL-1.1
# or LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

internal.error=Internal Error

parser.getString.err=JsonParser#getString() is valid only for KEY_NAME, VALUE_STRING, VALUE_NUMBER parser states. \
  But current parser state is {0}
parser.isIntegralNumber.err=JsonParser#isIntegralNumber() is valid only for VALUE_NUMBER parser state. \
  But current parser state is {0}
parser.getInt.err=JsonParser#getInt() is valid only for VALUE_NUMBER parser state. \
  But current parser state is {0}
parser.getLong.err=JsonParser#getLong() is valid only for VALUE_NUMBER parser state. \
  But current parser state is {0}
parser.getBigDecimal.err=JsonParser#getBigDecimal() is valid only for VALUE_NUMBER parser state. \
  But current parser state is {0}
parser.getArray.err=JsonParser#getArray() or JsonParser#getArrayStream() is valid only for START_ARRAY parser state. \
  But current parser state is {0}
parser.getObject.err=JsonParser#getObject() or JsonParser#getObjectStream() is valid only for START_OBJECT parser state. \
  But current parser state is {0}
parser.getValue.err=JsonParser#getValue() is valid only for START_ARRAY, START_OBJECT, KEY_NAME, VALUE_STRING, VALUE_NUMBER, VALUE_NULL, VALUE_FALSE, VALUE_TRUE parser states. \
  But current parser state is {0}
parser.getValueStream.err=JsonParser#getValueStream() the parser must not be in an array or object. \
  But current parser state is {0}
parser.expected.eof=Expected EOF token, but got {0}
parser.tokenizer.close.io=I/O error while closing JSON tokenizer
parser.invalid.token=Invalid token={0} at {1}. Expected tokens are: {2}
parser.state.err=Unknown value type {0}
parser.scope.err=Cannot be called for value {0}
parser.input.enc.detect.failed=Cannot auto-detect encoding, not enough chars
parser.input.enc.detect.ioerr=I/O error while auto-detecting the encoding of stream

generator.flush.io.err=I/O error while flushing generated JSON
generator.close.io.err=I/O error while closing JsonGenerator
generator.write.io.err=I/O error while writing in JsonGenerator
generator.illegal.method=Illegal method during JSON generation, \
  not valid in current context {0}
generator.double.infinite.nan=double value cannot be Infinite or NaN
generator.incomplete.json=Generating incomplete JSON
generator.illegal.multiple.text=Cannot generate more than one JSON text

writer.write.already.called=write/writeObject/writeArray/close method is already called

reader.read.already.called=read/readObject/readArray/close method is already called

objbuilder.name.null=Name in JsonObject's name/value pair cannot be null
objbuilder.value.null=Value in JsonObject's name/value pair cannot be null
objbuilder.object.builder.null=Object builder that is used to create a value in JsonObject's name/value pair cannot be null
objbuilder.array.builder.null=Array builder that is used to create a value in JsonObject's name/value pair cannot be null

arrbuilder.value.null=Cannot invoke add(null) while building JsonArray.
arrbuilder.object.builder.null=Object builder that is used to add a value to JSON array cannot be null
arrbuilder.array.builder.null=Array builder that is used to add a value to JSON array cannot be null
arrbuilder.valuelist.null=Index: {0}, Size: {1}

tokenizer.unexpected.char=Unexpected char {0} at {1}
tokenizer.expected.char=Unexpected char {0} at {1}, expecting ''{2}''
tokenizer.io.err=I/O error while parsing JSON

pointer.format.invalid=A non-empty JSON Pointer must begin with a ''/''
pointer.mapping.missing=The JSON Object ''{0}'' contains no mapping for the name ''{1}''
pointer.reference.invalid=The reference value in a JSON Pointer must be a JSON Object or a JSON Array, was ''{0}''
pointer.array.index.err=Array index format error, was ''{0}''
pointer.array.index.illegal=Illegal integer format, was ''{0}''

noderef.value.add.err=The root value only allows adding a JSON object or array
noderef.value.cannot.remove=The JSON value at the root cannot be removed
noderef.object.missing=Non-existing name/value pair in the object for key {0}
noderef.array.index.err=An array item index is out of range. Index: {0}, Size: {1}

patch.must.be.array=A JSON Patch must be an array of JSON Objects
patch.move.proper.prefix=The ''{0}'' path of the patch operation ''move'' is a proper prefix of the ''{1}'' path
patch.move.target.null=The ''{0}'' path of the patch operation ''move'' does not exist in target object
patch.test.failed=The JSON Patch operation ''test'' failed for path ''{0}'' and value ''{1}''
patch.illegal.operation=Illegal value for the op member of the JSON Patch operation: ''{0}''
patch.member.missing=The JSON Patch operation ''{0}'' must contain a ''{1}'' member
